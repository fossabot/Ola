// Load core mixins

.ellipsis() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.triangleDown(@color, @size: @triangle-width) {
    position: relative;

    &:after {
        content: "";
        width: 0; 
        height: 0; 
        border-left: @size solid transparent;
        border-right: @size solid transparent;
        border-top: @size solid @color;
        position: absolute;
        left: 50%;
        bottom: -@size;
        margin-left: -(@size);
    }
}

.triangleDownBorder(@color, @size: @triangle-width, @color2: @color) {
    position: relative;

    &:before {
        content: "";
        width: 0; 
        height: 0; 
        border-left: @size solid transparent;
        border-right: @size solid transparent;
        border-top: @size solid @color2;
        position: absolute;
        left: 50%;
        bottom: -@size;
        margin-left: -(@size);
    }

    &:after {
        content: "";
        width: 0; 
        height: 0; 
        border-left: @size solid transparent;
        border-right: @size solid transparent;
        border-top: @size solid @color;
        position: absolute;
        left: 50%;
        bottom: -@size + 1;
        margin-left: -(@size);
    }
}

.triangleDownInside(@color, @size: @triangle-width, @color2: @color) {
    position: relative;

    &:before {
        content: "";
        width: 0; 
        height: 0; 
        border-left: @size solid transparent;
        border-right: @size solid transparent;
        border-top: @size solid @color2;
        position: absolute;
        left: 50%;
        top: 0px;
        margin-left: -(@size);
    }

    &:after {
        content: "";
        width: 0; 
        height: 0; 
        border-left: @size solid transparent;
        border-right: @size solid transparent;
        border-top: @size solid @color;
        position: absolute;
        left: 50%;
        top: -1px;
        margin-left: -(@size);
    }
}

.triangleUp(@color, @size: @triangle-width) {
    position: relative;

    &:after {
        content: "";
        width: 0; 
        height: 0; 
        border-left: @size solid transparent;
        border-right: @size solid transparent;
        border-bottom: @size solid @color;
        position: absolute;
        left: 50%;
        top: -@size;
        margin-left: -(@size);
    }
}

.transition-transform-opacity(@transition, @transitionopac: @transition) {
    -webkit-transition: -webkit-transform @transition, opacity @transitionopac;
    -moz-transition: -moz-transform @transition, opacity @transitionopac;
      -o-transition: -o-transform @transition, opacity @transitionopac;
         transition: transform @transition, opacity @transitionopac;
}

.border-radius (@radius: 5px) {
    -webkit-border-radius: @radius;
    -moz-border-radius:    @radius;
    border-radius:         @radius;

    -moz-background-clip:    padding;
    -webkit-background-clip: padding-box;
    background-clip:         padding-box;
}

.border-radiuses (@topright: 0, @bottomright: 0, @bottomleft: 0, @topleft: 0) {
    -webkit-border-top-right-radius:    @topright;
    -webkit-border-bottom-right-radius: @bottomright;
    -webkit-border-bottom-left-radius:  @bottomleft;
    -webkit-border-top-left-radius:     @topleft;

    -moz-border-radius-topright:        @topright;
    -moz-border-radius-bottomright:     @bottomright;
    -moz-border-radius-bottomleft:      @bottomleft;
    -moz-border-radius-topleft:         @topleft;

    border-top-right-radius:            @topright;
    border-bottom-right-radius:         @bottomright;
    border-bottom-left-radius:          @bottomleft;
    border-top-left-radius:             @topleft;

    -moz-background-clip:    padding; 
    -webkit-background-clip: padding-box; 
    background-clip:         padding-box; 
}

.center-form(@width: 100%, @height: 100%) {
    position: fixed;
    top: 50%;
    left: 50%;
    max-height: 100%;

    transform: translate3d(-50%, -50%, 0);
    transform: translate3d(calc(~"-50% - 0px"), calc(~"-50% - 0px"), 0);
}

.titlecolor(@c) {
    a {
    color: @c;
        .knob .foreground {
            fill: @c;
        }
    }
}

.knob(@c) {
    .knob {
        .foreground {
            fill: @c;
        }
        .icon-cont {
            color: @c;
        }
    }
}
.linkcolor(@c) {
    a {
        color: @c;
        &:hover {
            color: darken(@c,3%);
        }
    }
}
/*
.bgcolor(@c) {
    color: @c;
    &:hover {
        color: darken(@c,3%);
    }
}
*/
.maincolor(@c) {
    #content {
        .title {
            .knob(@c);
            .btn-default {
                color: @c;
            }
        }
        .panel {
            .panel-heading {
                .btn-default, .icon {
                    color: @c !important;
                }
            }
            .panel-body {
                .recommendations li {
                    h3 {
                        .linkcolor(@c);
                    }
                }
            }
        }
        .chart-container {
            .chartarea {
                .area {
                    fill: @c;
                }
                .arealine {
                    stroke: @c;
                }
                .competitorline {
                    .strokepalette (@c);
                }
            }
            .competitors .show-competitors {
                .competitorspalette(@c);
            }
        }
    }
    .modal {
        .modalColors(@c);
    }
}

.modalColors(@c) {

    .change-modal {
        .goes-to {
            .linkcolor(@c);
        }
    }
    .modal-header {
        .knob(@c);
    }
    .modal-body {
        .linkcolor(@c);
        .alert {
            background: rgba(red(@c),green(@c),blue(@c),0.2);
            border-color: @c;
        }
    }
    .modal-footer {
        .linkcolor(@c);
        .btn-primary {
            background-color:@c;
        }
    }

}

.strokepalette(@c) {
    &[which=competitor1] {
        stroke: @return;
        .paletteone(@c);
    }
    &[which=competitor2] {
        .palettetwo(@c);
        stroke: @return;
    }
    &[which=competitor3] {
        .palettethree(@c);
        stroke: @return;
    }
    &[which=competitor4] {
        .palettefour(@c);
        stroke: @return;
    }
}
.competitorspalette(@c) {
    &.own .check-point {
        background: @c;
        .opacity(0.3);
    }
    a[which=competitor1] {
        color: @return;
        .paletteone(@c);
        .check-point {
            background: @return;
            .paletteone(@c);
        }
    }
    a[which=competitor2] {
        color: @return;
        .palettetwo(@c);
        .check-point {
            .palettetwo(@c);
            background: @return;
        }
    }
    a[which=competitor3] {
        color: @return;
        .palettethree(@c);
        .check-point {
            .palettethree(@c);
            background: @return;
        }
    }
    a[which=competitor4] {
        color: @return;
        .palettefour(@c);
        .check-point {
            .palettefour(@c);
            background: @return;
        }
    }

}

.donutfillpalette(@c) {
    &.competitor0 {
        fill: @gray-darker;
    }
    &.competitor1 {
        fill: @return;
        .paletteone(@c);
    }
    &.competitor2 {
        .palettetwo(@c);
        fill: @return;
    }
    &.competitor3 {
        .palettethree(@c);
        fill: @return;
    }
    &.competitor4 {
        .palettefour(@c);
        fill: @return;
    }
}

.popoverpalette(@c) {
    li.competitor0 {
        .circle {
            background-color: @gray-darker; 
        }           
        .number {
            color: @c;
        }
    }
    li.competitor1 {
        .circle {
            background-color: @return;
            .paletteone(@c);
        }   
    }
    li.competitor2 {
        .circle {
            .palettetwo(@c);
            background-color: @return;
        }   
    }
    li.competitor3 {
        .circle {
            .palettethree(@c);
            background-color: @return;
        }   
    }
    li.competitor4 {
        .circle {
            .palettefour(@c);
            background-color: @return;
        }   
    }
}


.paletteone(@c) {
    @return: desaturate(lighten(@c,13%),20%);
}
.palettetwo(@c) {
    @return: @c;
}
.palettethree(@c) {
    @return: darken(@c,13%);
}
.palettefour(@c) {
    @return: darken(@c,27%);
}

.panelcolor(@c) {
    .panel-heading {
        h2 {
            .foreground {
                fill: @c;
            }
            .icon {
                color: @c;
            }
        }
    }
    .panel-body {
        .colored {
            h1 {
                color: @c;
            }
        }
        > .row > div .list-group .list-group-item.list-title {
            background: rgba(red(@c),green(@c),blue(@c),0.7);
            color: #ffffff;
        }
        .donut {
            .chartdonut {
                .arc {
                    .donutfillpalette(@c);
                }
            }
            .donut-tooltip {
                .panel {
                    .position, .number {
                        color: @c;
                    }
                }
            }
            .donut-first {
                .position {
                    color: @c;
                }
            }
        }
    }
}

